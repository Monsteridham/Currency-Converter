pip install requests

import tkinter as tk
from tkinter import messagebox
import requests

class CurrencyConverter:
    def __init__(self, root):
        self.root = root
        self.root.title("Currency Converter")
        self.root.geometry("400x300")

        # API URL and Key
        self.api_key = 'YOUR_FIXER_API_KEY'  # Replace with your Fixer.io API key
        self.api_url = f"http://data.fixer.io/api/latest?access_key={self.api_key}"

        # Fetch exchange rates
        self.rates = self.get_exchange_rates()

        # List of common currencies
        self.common_currencies = list(self.rates.keys())

        # Create Tkinter variables
        self.from_var = tk.StringVar()
        self.to_var = tk.StringVar()
        self.amount_var = tk.StringVar()
        self.result_var = tk.StringVar()

        # GUI Elements
        self.create_widgets()

    def get_exchange_rates(self):
        """Fetch exchange rates from Fixer.io API"""
        try:
            response = requests.get(self.api_url)
            data = response.json()
            if data['success']:
                return data['rates']
            else:
                messagebox.showerror("Error", "Failed to fetch exchange rates.")
                return {}
        except Exception as e:
            messagebox.showerror("Error", f"Error connecting to API: {str(e)}")
            return {}

    def create_widgets(self):
        """Create the GUI widgets"""
        # Title Label
        tk.Label(self.root, text="Currency Converter", font=("Arial", 20)).pack(pady=10)

        # From Currency Dropdown
        tk.Label(self.root, text="From Currency").pack()
        self.from_menu = tk.OptionMenu(self.root, self.from_var, *self.common_currencies)
        self.from_menu.pack(pady=5)
        self.from_var.set(self.common_currencies[0])

        # To Currency Dropdown
        tk.Label(self.root, text="To Currency").pack()
        self.to_menu = tk.OptionMenu(self.root, self.to_var, *self.common_currencies)
        self.to_menu.pack(pady=5)
        self.to_var.set(self.common_currencies[1])

        # Amount Entry
        tk.Label(self.root, text="Amount").pack()
        self.amount_entry = tk.Entry(self.root, textvariable=self.amount_var)
        self.amount_entry.pack(pady=5)

        # Convert Button
        tk.Button(self.root, text="Convert", command=self.convert_currency).pack(pady=10)

        # Result Label
        self.result_label = tk.Label(self.root, textvariable=self.result_var, font=("Arial", 16))
        self.result_label.pack(pady=10)

        # Clear Button
        tk.Button(self.root, text="Clear", command=self.clear_inputs).pack()

    def convert_currency(self):
        """Convert currency based on user input"""
        try:
            from_currency = self.from_var.get()
            to_currency = self.to_var.get()
            amount = float(self.amount_var.get())

            if from_currency == to_currency:
                result = amount
            else:
                from_rate = self.rates[from_currency]
                to_rate = self.rates[to_currency]
                result = amount * (to_rate / from_rate)

            self.result_var.set(f"{amount:.2f} {from_currency} = {result:.2f} {to_currency}")
        except ValueError:
            messagebox.showerror("Invalid input", "Please enter a valid number for the amount.")
        except Exception as e:
            messagebox.showerror("Error", f"Error converting currency: {str(e)}")

    def clear_inputs(self):
        """Clear all inputs and result"""
        self.amount_var.set("")
        self.result_var.set("")

if __name__ == "__main__":
    root = tk.Tk()
    app = CurrencyConverter(root)
    root.mainloop()
